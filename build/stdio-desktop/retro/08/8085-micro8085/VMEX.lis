C:/Users/petra/AppData/Local/Temp/zcc0000BC28B73E4.asm:
     1                          MODULE micro8085_crt0_asm
     2                          LINE 0, "c:/z88dk/\lib\target\micro8085\classic\micro8085_crt0.asm"
c:/z88dk/\lib\target\micro8085\classic\micro8085_crt0.asm:
                                
     1                          ;-------------------------------------------------------------------------
     2                          ; Embedded target Micro8085 by Anders Hjelm
     3                          ; https://hackaday.io/project/176653-micro8085
     4                          ; for target clib support see /z88dk/examples/micro8085/micro8085.h
     5                          ;-------------------------------------------------------------------------
     6                                  module micro8085_crt0
     7                          
     8                          ;-------------------------------------------------------------------------
     9                          ; Include zcc_opt.def to find out some info
    10                          ;-------------------------------------------------------------------------
    11                                  defc    crt0 = 1
    12                                  INCLUDE "zcc_opt.def"
C:/Users/petra/AppData/Local/Temp/zcc0000BC28B73E3/zcc_opt.def:
     1                          
     2                          IF !DEFINED_CPU_8085
     3                          	defc	DEFINED_CPU_8085 = 1
     4                          	defc CPU_8085 = 1
     5                          ENDIF
     6                          
     7                          
     8                          IF !DEFINED_CRT_printf_format
     9                          	defc	DEFINED_CRT_printf_format = 1
    10                          	defc CRT_printf_format = 0x00000201
    11                          ELSE
    12                          	UNDEFINE temp_printf_format
    13                          	defc temp_printf_format = CRT_printf_format
    14                          	UNDEFINE CRT_printf_format
    15                          	defc CRT_printf_format = temp_printf_format | 0x00000201
    16                          ENDIF
    17                          
    18                          
    19                          IF !NEED_printf
    20                          	DEFINE	NEED_printf
    21                          ENDIF
    22                          
    23                          
c:/z88dk/\lib\target\micro8085\classic\micro8085_crt0.asm:
    13                          
    14                          ;-------------------------------------------------------------------------
    15                          ; Some scope definitions
    16                          ;-------------------------------------------------------------------------
    17                                  EXTERN    _main           ;main() is always external to crt0 code
    18                          
    19                                  PUBLIC    cleanup         ;jp'd to by exit()
    20                                  PUBLIC    l_dcal          ;jp(hl)
    21                          
    22                                  PUBLIC    _urxbuf
    23                                  PUBLIC    _putidx
    24                                  PUBLIC    _getidx
    25                                  PUBLIC    _get_msec
    26                          
    27                                  PUBLIC    puartd
    28                                  PUBLIC    puartc
    29                                  PUBLIC    pspiclk
    30                                  PUBLIC    pselect
    31                                  PUBLIC    padc1
    32                                  PUBLIC    padc2
    33                          
    34                                  PUBLIC    uenabl
    35                                  PUBLIC    udtr
    36                                  PUBLIC    urts
    37                          
    38                                  PUBLIC    eepgsz
    39                                  PUBLIC    CPU_CLK_kHz
    40                          
    41                          ;-------------------------------------------------------------------------
    42                          ; *** IO PORT MAP AND RELATED DEFINES FOR MICRO8085 ***
    43                          piocmd  equ  00H
    44                          pioa    equ  01H
    45                          piob    equ  02H
    46                          pioc    equ  03H
    47                          ptiml   equ  04H
    48                          ptimh   equ  05H
    49                          puartd  equ  10H
    50                          puartc  equ  11H
    51                          pspiclk equ  20H    ;DUMMY WRITE TO GENERATE CLOCK
    52                          pselect equ  30H    ;TWO BIT OUTPUT REGISTER
    53                          padc1   equ  40H    ;ADC CONV.TIME 140 MICROSEC FROM
    54                          padc2   equ  50H    ;OUT(WRITE/START) TO IN(READ)
    55                          pdac    equ  60H
    56                          
    57                          ; *** INTEL8251 UART COMMANDS ETC ***
    58                          ureset  equ  40H    ;01000000b    ;RESET COMMAND
    59                          usetup  equ  4EH    ;01001110b    ;8 DATA, 1 STOP, X16
    60                          uenabl  equ  15H    ;00010101b    ; - ,ERRST,RXEN, - ,TXEN
    61                          udtr    equ  02H    ;00000010b    ; - ,  -  , -  ,DTR, -
    62                          urts    equ  20H    ;00100000b    ;RTS,  -  , -  , - , -
    63                          
    64                          ; *** SERIAL EEPROM COMMANDS AND SIZE ***
    65                          eepgsz  equ  64     ;IMPLEMENTATION ALLOWS MAX PAGE SIZE 256 BYTE
    66                          eesize  equ  32768  ;IMPLEMENTATION ALLOWS MAX SIZE 65536 - PAGE SIZE
    67                          
    68                          ;-------------------------------------------------------------------------
    69                                  defc    CRT_ORG_CODE = 0x0000
    70                                  defc    CRT_ORG_DATA = 0x8000
    71                                  defc    CRT_ORG_BSS  = 0x8000
    72                          
    73                          ;------ place uart rx buff at top of ram align to 256 byte boundary ------
    74                          ;------ locate get & put index together for single 16bit r/w access ------
    75                                  defc    _urxbuf   = 0xFF00
    76                                  defc    _putidx   = (_urxbuf-1)
    77                                  defc    _getidx   = (_urxbuf-2)
    78                                  defc    _mstick   = (_urxbuf-4)
    79                                  defc    _scrtchpd = (_urxbuf-16)
    80                          
    81                          ;------ below rx buffer and some additional data we place the stack ------
    82                                  defc    REGISTER_SP = _scrtchpd
    83                                  defc    CLIB_EXIT_STACK_SIZE = 0
    84                                  defc    __CPU_CLOCK = 6144000
    85                                  defc    CPU_CLK_kHz = 6144
    86                          
    87                          ;------ overide default definition clib_fopn_max = 10 in crt_rules ------
    88                                  defc    DEFINED_CLIB_FOPEN_MAX = 1
    89                                  defc    CLIB_FOPEN_MAX = 3
    90                                  INCLUDE "crt/classic/crt_rules.inc"
c:/z88dk/lib/crt/classic/crt_rules.inc:
     1                          
     2                          ; Rules for setting up defaults for configuring the build
     3                          
     4                             INCLUDE "crt/classic/crt_defaults.inc"
c:/z88dk/lib/crt/classic/crt_defaults.inc:
     1                          ;
     2                          ; Default value
     3                          
     4                          
     5                             defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
     6                          
     7                             defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
     8                             defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
     9                             defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
    10                          
    11                             defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
    12                             defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
    13                          
    14                          
    15                             ; clib defaults
    16                             defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
    17                          
    18                             defc DEF__clib_banking_stack_size   = 100	 ;; For each bank call we save 2 words on the temporary stack
    19                          
c:/z88dk/lib/crt/classic/crt_rules.inc:
     5                          
     6                             IFNDEF CRT_INITIALIZE_BSS
     7                                defc CRT_INITIALIZE_BSS = 1
     8                             ENDIF
     9                          
    10                             IFDEF REGISTER_SP
    11                                defc __register_sp = REGISTER_SP
    12                             ELSE
    13                                IFDEF STACKPTR
    14                                   defc __register_sp = STACKPTR
    15                                ELSE
    16                                   IFDEF TAR__register_sp
    17                                      defc __register_sp = TAR__register_sp
    18                                   ELSE
    19                                      defc __register_sp = DEF__register_sp
    20                                   ENDIF
    21                                ENDIF
    22                             ENDIF
    23                          
    24                             IFNDEF TAR__crt_enable_rst
    25                                 defc TAR__crt_enable_rst = DEF__crt_enable_rst
    26                             ENDIF
    27                          
    28                             IFDEF CRT_ENABLE_RST
    29                                defc __crt_enable_rst = CRT_ENABLE_RST | TAR__crt_enable_rst
    30                             ELSE
    31                                defc __crt_enable_rst = TAR__crt_enable_rst
    32                             ENDIF
    33                          
    34                             IFDEF CRT_ENABLE_NMI
    35                                defc __crt_enable_nmi = CRT_ENABLE_NMI
    36                             ELSE
    37                               IFNDEF TAR__crt_enable_nmi
    38                                  defc TAR__crt_enable_nmi = 0
    39                               ENDIF
    40                               defc __crt_enable_nmi = TAR__crt_enable_nmi
    41                             ENDIF
    42                          
    43                             IFDEF CRT_ENABLE_RESTART
    44                                defc __crt_enable_restart = CRT_ENABLE_RESTART
    45                             ELSE
    46                                IFDEF TAR__crt_enable_restart
    47                                   defc __crt_enable_restart = TAR__crt_enable_restart
    48                                ELSE
    49                                   defc __crt_enable_restart = DEF__crt_enable_restart
    50                                ENDIF
    51                             ENDIF
    52                          
    53                            IF __crt_enable_restart
    54                                defc __crt_on_exit = 0x10008
    55                             ELSE
    56                                IFDEF CRT_ON_EXIT
    57                                   defc __crt_on_exit = CRT_ON_EXIT
    58                                ELSE
    59                                   IFDEF TAR__crt_on_exit
    60                                      defc __crt_on_exit = TAR__crt_on_exit
    61                                   ELSE
    62                                      defc __crt_on_exit = DEF__crt_on_exit
    63                                   ENDIF
    64                                ENDIF
    65                            ENDIF
    66                          
    67                          
    68                             IFDEF CRT_ENABLE_EIDI
    69                                defc __crt_enable_eidi = CRT_ENABLE_EIDI
    70                             ELSE
    71                                IFDEF TAR__crt_enable_eidi
    72                                   defc __crt_enable_eidi = TAR__crt_enable_eidi
    73                                ELSE
    74                                   defc __crt_enable_eidi = DEF__crt_enable_eidi
    75                                ENDIF
    76                             ENDIF
    77                          
    78                          
    79                             ; By default we want to have stdio working for us
    80                             IFNDEF CRT_ENABLE_STDIO
    81                                 defc CRT_ENABLE_STDIO = 1
    82                             ENDIF
    83                          
    84                             IFDEF CLIB_EXIT_STACK_SIZE
    85                                defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
    86                             ELSE
    87                                IFDEF TAR__clib_exit_stack_size
    88                                   defc __clib_exit_stack_size = TAR__clib_exit_stack_size
    89                                ELSE
    90                                   defc __clib_exit_stack_size = DEF__clib_exit_stack_size
    91                                ENDIF
    92                             ENDIF
    93                          
    94                             ; For each bank call we save 2 words on the temporary stack
    95                             ; this controls the depth of calls we can make safely
    96                             IFNDEF CLIB_BANKING_STACK_SIZE
    97                                PUBLIC CLIB_BANKING_STACK_SIZE
    98                                IFDEF TAR__clib_banking_stack_size
    99                                   defc CLIB_BANKING_STACK_SIZE = TAR__clib_banking_stack_size
   100                                ELSE
   101                                   defc CLIB_BANKING_STACK_SIZE = DEF__clib_banking_stack_size
   102                                ENDIF
   103                             ENDIF
   104                          
   105                          
   106                             PUBLIC __CRT_KEY_DEL
   107                             IFDEF CRT_KEY_DEL
   108                               defc __CRT_KEY_DEL = CRT_KEY_DEL
   109                             ELSE
   110                               defc __CRT_KEY_DEL = 8
   111                             ENDIF
   112                          
   113                             PUBLIC __CRT_KEY_CAPS_LOCK
   114                             IFDEF CRT_KEY_CAPS_LOCK
   115                               defc __CRT_KEY_CAPS_LOCK  = CRT_KEY_CAPS_LOCK
   116                             ELSE
   117                               defc __CRT_KEY_CAPS_LOCK = 6
   118                             ENDIF
   119                          
   120                             PUBLIC __CPU_CLOCK
   121                             IFNDEF __CPU_CLOCK
   122                               defc __CPU_CLOCK = 3500000
   123                             ENDIF
   124                          
   125                             PUBLIC __CLIB_CONIO_NATIVE_COLOUR
   126                             IFDEF CLIB_CONIO_NATIVE_COLOUR
   127                               defc __CLIB_CONIO_NATIVE_COLOUR = CLIB_CONIO_NATIVE_COLOUR
   128                             ELSE
   129                               defc __CLIB_CONIO_NATIVE_COLOUR = 0
   130                             ENDIF
   131                          
   132                             ; When using the firmware printer we may need to disable the soft
   133                             ; cursor created by fgets_cons()
   134                             PUBLIC __CLIB_DISABLE_FGETS_CURSOR
   135                             IFDEF CLIB_DISABLE_FGETS_CURSOR
   136                               defc __CLIB_DISABLE_FGETS_CURSOR = CLIB_DISABLE_FGETS_CURSOR
   137                             ELSE
   138                               defc __CLIB_DISABLE_FGETS_CURSOR = 0
   139                             ENDIF
   140                          
   141                             ; Delay when entering fgetc_cons()
   142                             ; 50ms stops rogue repeats nicely, but may need tuning
   143                             PUBLIC __CLIB_FGETC_CONS_DELAY
   144                             IFDEF CLIB_FGETC_CONS_DELAY
   145                               defc __CLIB_FGETC_CONS_DELAY = CLIB_FGETC_CONS_DELAY
   146                             ELSE
   147                               defc __CLIB_FGETC_CONS_DELAY = 50
   148                             ENDIF
   149                          
   150                             ; Delay when kbhit/getch() returns a cached key press
   151                             ; Delaying slightly means that typing is possible
   152                             PUBLIC __CLIB_KBHIT_DELAY
   153                             IFDEF CLIB_KBHIT_DELAY
   154                               defc __CLIB_KBHIT_DELAY = CLIB_KBHIT_DELAY
   155                             ELSE
   156                               defc __CLIB_KBHIT_DELAY = 0
   157                             ENDIF
   158                          
   159                             ; Some ports (looking at you tiki100) need to have graphics routines stored out
   160                             ; of paging harm. Normally we'd just use code_driver and keep the routines close
   161                             ; the start of the address space. However for tiki100, we need them at the end,
   162                             ; (in this case > 32768)
   163                             IF DEFINED_CRT_ORG_GRAPHICS
   164                                 defc __crt_org_graphics = CRT_ORG_GRAPHICS
   165                             ENDIF
   166                          
   167                             ; If 32 bit floats are defined, then we need to indicate to the library
   168                             ; that they are in use (mainly for printf/scanf)
   169                             PUBLIC CLIB_32BIT_FLOATS
   170                             IF !DEFINED_CLIB_32BIT_FLOATS
   171                                 defc CLIB_32BIT_FLOATS = 0
   172                             ENDIF
   173                             PUBLIC CLIB_64BIT_FLOATS
   174                             IF !DEFINED_CLIB_64BIT_FLOATS
   175                                 defc CLIB_64BIT_FLOATS = 0
   176                             ENDIF
   177                          
   178                             ; Some targets startup in different screen modes depending on the environment:
   179                             ; eg native = 40columns, CP/M = 80 columns. These should be explicitly defined
   180                             ; if needed. So default to an unused value if not
   181                             PUBLIC CLIB_DEFAULT_SCREEN_MODE
   182                             IFNDEF CLIB_DEFAULT_SCREEN_MODE
   183                                 defc CLIB_DEFAULT_SCREEN_MODE = 0
   184                             ENDIF
   185                          
   186                              ; Maximum number of FILEs available
   187                              IF !DEFINED_CLIB_FOPEN_MAX
   188                                  DEFC    CLIB_FOPEN_MAX = 10
   189                              ENDIF
   190                              PUBLIC  __FOPEN_MAX
   191                              defc    __FOPEN_MAX = CLIB_FOPEN_MAX
   192                          
   193                              ; Maximum number of fds available
   194                              IF !DEFINED_CLIB_OPEN_MAX
   195                                  ; Map this old nofileio pragma into a modern form
   196                                  IF DEFINED_nofileio
   197                                      defc    CLIB_OPEN_MAX = 0
   198                                  ELSE
   199                                      defc    CLIB_OPEN_MAX = CLIB_FOPEN_MAX
   200                                  ENDIF
   201                              ENDIF
   202                              PUBLIC  __CLIB_OPEN_MAX
   203                              defc    __CLIB_OPEN_MAX = CLIB_OPEN_MAX
   204                          
   205                             ; By default allow the command line options if available on the target/subtype
   206                             IF !DEFINED_CRT_ENABLE_COMMANDLINE
   207                                IFDEF TAR__CRT_ENABLE_COMMANDLINE
   208                                    defc CRT_ENABLE_COMMANDLINE = TAR__CRT_ENABLE_COMMANDLINE
   209                                ELSE
   210                                    defc CRT_ENABLE_COMMANDLINE = 1
   211                                ENDIF
   212                             ENDIF
   213                          
   214                          
   215                             ; Map this old pragma into a "modern" name
   216                             IF DEFINED_nostreams
   217                                 defc CRT_COMMANDLINE_REDIRECTION = 0
   218                             ELIF !DEFINED_CRT_COMMANDLINE_REDIRECTION
   219                                 ; File redirection on command line arguments can only happen
   220                                 ; if stdio is enabled
   221                                 IF CRT_ENABLE_STDIO = 1
   222                                     defc CRT_COMMANDLINE_REDIRECTION = 1
   223                                 ELSE
   224                                     defc CRT_COMMANDLINE_REDIRECTION = 0
   225                                 ENDIF
   226                             ENDIF
   227                          
   228                             ; Block size for the gendos library
   229                             IF !DEFINED_CLIB_RND_BLOCKSIZE
   230                                DEFC    CLIB_RND_BLOCKSIZE = 1000
   231                             ENDIF
   232                             PUBLIC  __RND_BLOCKSIZE
   233                             defc    __RND_BLOCKSIZE = CLIB_RND_BLOCKSIZE
   234                          
   235                             ; Define the height of the font
   236                             IF !DEFINED_CLIB_FONT_HEIGHT
   237                                defc CLIB_FONT_HEIGHT = 8
   238                             ENDIF
   239                             PUBLIC __CLIB_FONT_HEIGHT
   240                             defc __CLIB_FONT_HEIGHT = CLIB_FONT_HEIGHT
   241                          
   242                             ; Firmware click setting (MSX/SVI)
   243                             IF !DEFINED_CLIB_FIRMWARE_KEYBOARD_CLICK
   244                                defc CLIB_FIRMWARE_KEYBOARD_CLICK = -1
   245                             ENDIF
   246                             PUBLIC __CLIB_FIRMWARE_KEYBOARD_CLICK
   247                             defc __CLIB_FIRMWARE_KEYBOARD_CLICK = CLIB_FIRMWARE_KEYBOARD_CLICK
   248                          
   249                             ; Custom memory map
   250                             IF DEFINED_MMAP
   251                                 defc __MMAP = MMAP
   252                             ELSE
   253                                 defc __MMAP = 0
   254                             ENDIF
   255                          
c:/z88dk/\lib\target\micro8085\classic\micro8085_crt0.asm:
    91                          
    92                          ;-------------------------------------------------------------------------
    93                                  org     CRT_ORG_CODE
    94  0000  310000            rst0:   ld      sp,__register_sp
    95  0003  c30000                    jp      program         ;RST0 standard entry
    96  0006  0000                      defs    $08-ASMPC
    97                          
    98  0008  c9                rst1:   ret                     ;RST1 not used
    99  0009  00000000000000            defs    $10-ASMPC
   100                          
   101  0010  c9                rst2:   ret                     ;RST2 not used
   102  0011  00000000000000            defs    $18-ASMPC
   103                          
   104  0018  c9                rst3:   ret                     ;RST3 not used
   105  0019  00000000000000            defs    $20-ASMPC
   106                          
   107  0020  c9                rst4:   ret                     ;RST4 not used
   108  0021  000000                    defs    $24-ASMPC
   109                          
   110  0024  c9                trap:   ret                     ;TRAP not used
   111  0025  000000                    defs    $28-ASMPC
   112                          
   113  0028  c9                rst5:   ret                     ;RST5 not used
   114  0029  000000                    defs    $2C-ASMPC
   115                          
   116  002c  c9                rst55:  ret                     ;RST5.5 not used
   117  002d  000000                    defs    $30-ASMPC
   118                          
   119  0030  c9                rst6:   ret                     ;RST6 not used
   120  0031  000000                    defs    $34-ASMPC
   121                          
   122  0034  f3                rst65:  di                      ;RST6.5 uart rx isr
   123  0035  c34d00                    jp      intr65          ;jmp to interrupt code
   124                                  defs    $38-ASMPC
   125                          
   126  0038  c9                rst7:   ret                     ;RST7 not used
   127  0039  000000                    defs    $3C-ASMPC
   128                          
   129  003c  f3                rst75:  di                      ;RST7.5 timer isr
   130  003d  f5                        push    af
   131  003e  e5                        push    hl
   132  003f  2afcfe                    lhld    _mstick         ;millisec count location
   133  0042  23                        inc     hl              ;increment milliseconds
   134  0043  22fcfe                    shld    _mstick         ;back to its location
   135  0046  3e10                      ld      a,10H           ;reset rst7.5 f/f
   136  0048  30                        sim
   137  0049  e1                        pop     hl
   138  004a  f1                        pop     af
   139  004b  fb                        ei
   140  004c  c9                        ret
   141                          
   142  004d  f5                intr65: push    af
   143  004e  e5                        push    hl
   144  004f  3afffe                    ld      a,(_putidx)     ;get the buffer put index
   145  0052  6f                        ld      l,a             ;prepare for memory access
   146  0053  26ff                      ld      h,_urxbuf/256   ;msb of buffer address
   147  0055  db10                      in      a,(puartd)      ;get the char from uart
   148  0057  77                        ld      (hl),a          ;poke it to buffer
   149  0058  2c                        inc     l               ;bump buf put index
   150  0059  3afefe                    ld      a,(_getidx)     ;peek the get index
   151  005c  bd                        cp      l               ;compare with put
   152  005d  ca6400                    jp      z,i_skip        ;put==get means buffer full
   153  0060  7d                        ld      a,l             ;updated put index to a
   154  0061  32fffe                    ld      (_putidx),a     ;and store it
   155  0064  e1                i_skip: pop     hl
   156  0065  f1                        pop     af
   157  0066  fb                        ei
   158  0067  c9                        ret
   159                          
   160                          ;-------------------------------------------------------------------------
   161                          ; extern uint16 get_msec(void)  ;returns the millisec tick value
   162                          _get_msec:
   163  0068  f3                        di
   164  0069  2afcfe                    lhld    _mstick         ;millisec count location
   165  006c  fb                        ei
   166  006d  c9                        ret
   167                          
   168                          ;-------------------------------------------------------------------------
   169                          program:
   170                          ; Optional definition for auto MALLOC init it assumes we have free
   171                          ; space between the end of the compiled program and the stack pointer
   172                          IF DEFINED_USING_amalloc
   173                                  INCLUDE "crt/classic/crt_init_amalloc.asm"
   174                          ENDIF
   175  006e  cd7b00                    call    target_init
   176  0071  cd0000                    call    crt0_init_bss
   177  0074  cd0000                    call    _main           ;void main(void) so no args or retval
   178                          
   179  0077  c30000            cleanup: jp     rst0            ;restart if main should return
   180                          
   181  007a  e9                l_dcal:  jp     (hl)            ;Used for function pointer calls
   182                          
   183                          ;-------------------------------------------------------------------------
   184                          target_init:
   185  007b  210000                    ld      hl,0
   186  007e  22fefe                    shld    _getidx         ;RESET PUT & GET INDEXES
   187  0081  22fcfe                    shld    _mstick         ;RESET MILLISEC COUNT
   188  0084  3e80                      ld      a,80H
   189  0086  d360                      out     (pdac),a        ;PUT OUT HALF VCC ON DAC
   190  0088  97                        sub     a               ;RESET A
   191  0089  d330                      out     (pselect),a     ;RESET D F/F select LINES
   192                          ;8251_uart
   193  008b  d311                      out     (puartc),a      ;PUT 8251 IN COMMAND MODE
   194  008d  d311                      out     (puartc),a      ;WRITE 0 THREE TIMES
   195  008f  d311                      out     (puartc),a
   196  0091  3e40                      ld      a,ureset        ;RESET COMMAND
   197  0093  d311                      out     (puartc),a      ;WRITE IT TO 8251 USART
   198  0095  3e4e                      ld      a,usetup        ;8 DATA, 1 STOP, X16
   199  0097  d311                      out     (puartc),a      ;WRITE IT TO 8251 USART
   200  0099  3e15                      ld      a,uenabl        ;ERRST, RXEN, TXEN
   201  009b  d311                      out     (puartc),a      ;WRITE IT TO 8251 USART
   202                          ;8155_timer
   203  009d  210018                    ld      hl,CPU_CLK_kHz
   204  00a0  10                        sra     hl              ;DIV BY 2 TO GET TIMER COUNT
   205  00a1  7d                        ld      a,l             ;LOW BYTE OF COUNT
   206  00a2  d304                      out     (ptiml),a       ;SEND TO TIMER LOW REGISTER
   207  00a4  7c                        ld      a,h             ;COUNTER IN 8155 IS 14 BIT
   208  00a5  e63f                      and     3FH             ;MAKE SURE BITS 6,7 ARE ZERO
   209  00a7  f640                      or      40H             ;SET MODE CONT. SQUARE WAVE
   210  00a9  d305                      out     (ptimh),a       ;SEND TO TIMER HI REGISTER
   211  00ab  3ec0                      ld      a,0C0H          ;START TIMER COMMAND
   212  00ad  d300                      out     (piocmd),a      ;SEND TO 8155 CONFIG REG
   213                          ;8085_interrupt
   214  00af  3e19                      ld      a,19H           ;RST F/F & ENABLE 7.5 & 6.5
   215  00b1  30                        sim                     ;SET THE NEW MASK
   216  00b2  fb                        ei                      ;ENABLE INTERRUPT
   217  00b3  c9                        ret
   218                          
   219                          ;-------------------------------------------------------------------------
   220                                  defc    __crt_org_bss = CRT_ORG_BSS
   221                                  defc    __crt_model = 1
   222                          
   223                                  INCLUDE "crt/classic/crt_runtime_selection.asm"
c:/z88dk/lib/crt/classic/crt_runtime_selection.asm:
     1                          ;
     2                          ; Allow selection of the library functions at linktime
     3                          ;
     4                          ; Included by crt0 files
     5                          ;
     6                          
     7                          
     8                          ; scanf format picker
     9                          
    10                          ; Compatibility with the new library format picker. The classic library
    11                          ; implements several of these together so there's an element of grouping.
    12                          ;
    13                          ; Default is to enable all converters except for float.
    14                          ;
    15                          ; Use -pragma-define:CLIB_OPT_SCANF=0x..... to control formatters
    16                          ;
    17                          ; bit 0 =  $    01 = enable %d
    18                          ; bit 1 =  $    02 = enable %u
    19                          ; bit 2 =  $    04 = enable %x
    20                          ; bit 3 =  $    08 = enable %X (duplicate)
    21                          ; bit 4 =  $    10 = enable %o
    22                          ; bit 5 =  $    20 = enable %n
    23                          ; bit 6 =  $    40 = enable %i
    24                          ; bit 7 =  $    80 = enable %p
    25                          ; bit 8 =  $   100 = enable %B
    26                          ; bit 9 =  $   200 = enable %s
    27                          ; bit 10 = $   400 = enable %c
    28                          ; * bit 11 = $   800 = enable %I
    29                          ; bit 12 = $  1000 = enable %ld
    30                          ; bit 13 = $  2000 = enable %lu
    31                          ; bit 14 = $  4000 = enable %lx
    32                          ; bit 15 = $  8000 = enable %lX (duplicate)
    33                          ; bit 16 = $ 10000 = enable %lo
    34                          ; bit 17 = $ 20000 = enable %ln
    35                          ; bit 18 = $ 40000 = enable %li
    36                          ; bit 19 = $ 80000 = enable %lp
    37                          ; bit 20 = $100000 = enable %lB
    38                          ; bit 21 = $200000 = enable %[
    39                          ; * bit 22 = $  400000 = enable %a
    40                          ; * bit 23 = $  800000 = enable %A
    41                          ; bit 24 = $ 1000000 = enable %e
    42                          ; bit 25 = $ 2000000 = enable %E
    43                          ; bit 26 = $ 4000000 = enable %f
    44                          ; bit 27 = $ 8000000 = enable %F
    45                          ; bit 28 = $10000000 = enable %g
    46                          ; bit 29 = $20000000 = enable %G
    47                          ; bit 30 = $40000000 = enable flags handling
    48                          
    49                          IF DEFINED_CLIB_OPT_SCANF
    50                          	; User has specified the configuration level - force scanf to be included
    51                          	UNDEFINE NEED_scanf
    52                          	DEFINE NEED_scanf
    53                          ELSE
    54                          	IF DEFINED_CRT_scanf_format
    55                          	    ;Only defined as part of sccz80
    56                          	    defc CLIB_OPT_SCANF = CRT_scanf_format
    57                                  ELSE
    58                          	    ; TODO: Some default configurations
    59                                  ENDIF
    60                          ENDIF
    61                          
    62                          
    63                          IF NEED_scanf
    64                          	PUBLIC	__scanf_format_table
    65                          	EXTERN	__scanf_handle_d
    66                          	EXTERN	__scanf_handle_u
    67                          	EXTERN	__scanf_handle_o
    68                          	EXTERN	__scanf_handle_x
    69                          	EXTERN	__scanf_handle_p
    70                          	EXTERN	__scanf_handle_B
    71                          	EXTERN	__scanf_handle_f
    72                          	EXTERN	__scanf_handle_s
    73                          	EXTERN	__scanf_handle_c
    74                          	EXTERN	__scanf_handle_n
    75                          	EXTERN	__scanf_handle_i
    76                          	EXTERN	__scanf_handle_bkt
    77                          	EXTERN	__scanf_noop
    78                          
    79                          __scanf_format_table:
    80                          IF CLIB_OPT_SCANF & $40040
    81                          	defb	'i'
    82                          	defw	__scanf_handle_i
    83                          	defc	temp_CLIB_OPT_SCANF = CLIB_OPT_SCANF
    84                          	UNDEFINE CLIB_OPT_SCANF
    85                          	defc	CLIB_OPT_SCANF = temp_CLIB_OPT_SCANF | 0x3003 | 0x8c08c | 0x10010 | 0x100100
    86                          ENDIF
    87                          
    88                          
    89                          
    90                          IF CLIB_OPT_SCANF & $2002
    91                          	defb	'u'
    92                          	defw	__scanf_handle_u
    93                          ENDIF
    94                          
    95                          IF CLIB_OPT_SCANF & $1001
    96                          	defb	'd'
    97                          	defw	__scanf_handle_d
    98                          ENDIF
    99                          
   100                          IF CLIB_OPT_SCANF & $c00c
   101                          	defb	'x'
   102                          	defw	__scanf_handle_x
   103                          ENDIF
   104                          
   105                          IF CLIB_OPT_SCANF & $80080
   106                          	defb	'p'
   107                          	defw	__scanf_handle_x
   108                          ENDIF
   109                          
   110                          IF CLIB_OPT_SCANF & $10010
   111                          	defb	'o'
   112                          	defw	__scanf_handle_o
   113                          ENDIF
   114                          
   115                          IF CLIB_OPT_SCANF & $100100
   116                          	defb	'B'
   117                          	defw	__scanf_handle_B
   118                          ENDIF
   119                          
   120                          IF CLIB_OPT_SCANF & $20020
   121                          	defb	'n'
   122                          	defw	__scanf_handle_n
   123                          ENDIF
   124                          
   125                          IF CLIB_OPT_SCANF & $200
   126                          	defb	's'
   127                          	defw	__scanf_handle_s
   128                          ENDIF
   129                          
   130                          IF CLIB_OPT_SCANF & $400
   131                          	defb	'c'
   132                          	defw	__scanf_handle_c
   133                          ENDIF
   134                          
   135                          IF CLIB_OPT_SCANF & $4000000
   136                          	defb	'f'
   137                          	defw	__scanf_handle_f
   138                          ENDIF
   139                          
   140                          IF CLIB_OPT_SCANF & $1000000
   141                          	defb	'e'
   142                          	defw	__scanf_handle_f
   143                          ENDIF
   144                          IF CLIB_OPT_SCANF & $10000000
   145                          	defb	'g'
   146                          	defw	__scanf_handle_f
   147                          ENDIF
   148                          IF CLIB_OPT_SCANF & $200000
   149                          	defb	'['
   150                          	defw	__scanf_handle_bkt
   151                          ENDIF
   152                          
   153                          	defb	0	;end marker
   154                          ENDIF
   155                          
   156                          ;
   157                          ; printf format picker
   158                          ;
   159                          
   160                          
   161                          IF DEFINED_CLIB_OPT_PRINTF
   162                          	; User has specified the configuration level - force printf to be included
   163                          	UNDEFINE NEED_printf
   164                          	DEFINE NEED_printf
   165                          ELSE
   166                          	IF DEFINED_CRT_printf_format
   167                          	    ;Only defined as part of sccz80
   168                          	    defc CLIB_OPT_PRINTF = CRT_printf_format
   169                                  ELSE
   170                          	    ; Default configurations to match old behaviour
   171                          	    ; The built in one is roughly the old ministdio
   172                          	    IF DEFINED_complexstdio
   173                                          defc CLIB_OPT_PRINTF = 0x851BF7BF
   174                                      ELSE
   175                          	        defc CLIB_OPT_PRINTF = 0x801BF7BF
   176                                      ENDIF
   177                                  ENDIF
   178                          ENDIF
   179                          
   180                          IF DEFINED_CLIB_OPT_PRINTF_2
   181                          	; User has specified the configuration level - force printf to be included
   182                          	UNDEFINE NEED_printf
   183                          	DEFINE NEED_printf
   184                          ENDIF
   185                          
   186                          IF NEED_printf
   187                          	PUBLIC	__printf_format_table
   188                          	PUBLIC  __printf_format_table64
   189                          	EXTERN	__printf_handle_d
   190                          	EXTERN	__printf_handle_u
   191                          	EXTERN	__printf_handle_o
   192                          	EXTERN	__printf_handle_x
   193                          	EXTERN	__printf_handle_X
   194                          	EXTERN	__printf_handle_p
   195                          	EXTERN	__printf_handle_e
   196                          	EXTERN	__printf_handle_f
   197                          	EXTERN	__printf_handle_s
   198                          	EXTERN	__printf_handle_c
   199                          	EXTERN	__printf_handle_n
   200                          	EXTERN	__printf_handle_B
   201                          	EXTERN	__printf_handle_ll
   202                          	EXTERN	__printf_handle_lld
   203                          	EXTERN	__printf_handle_llu
   204                          	EXTERN	__printf_handle_llo
   205                          	EXTERN	__printf_handle_llx
   206                          	EXTERN	__printf_handle_llX
   207                          	EXTERN	__printf_handle_llB
   208                          
   209                          __printf_format_table:
   210                          
   211                          IF CLIB_OPT_PRINTF & $2002
   212                          	defb	'u'
   213                          	defw	__printf_handle_u
   214                          ENDIF
   215                          
   216                          IF CLIB_OPT_PRINTF & $1001
   217  00b4  64                	defb	'd'
   218  00b5  0000              	defw	__printf_handle_d
   219                          ENDIF
   220                          
   221                          IF CLIB_OPT_PRINTF & $4004
   222                          	defb	'x'
   223                          	defw	__printf_handle_x
   224                          ENDIF
   225                          
   226                          IF CLIB_OPT_PRINTF & $8008
   227                          	defb	'X'
   228                          	defw	__printf_handle_X
   229                          ENDIF
   230                          
   231                          IF CLIB_OPT_PRINTF & $80080
   232                          	defb	'p'
   233                          	defw	__printf_handle_x
   234                          ENDIF
   235                          
   236                          IF CLIB_OPT_PRINTF & $100100
   237                          	defb	'B'
   238                          	defw	__printf_handle_B
   239                          ENDIF
   240                          
   241                          IF CLIB_OPT_PRINTF  & $10010
   242                          	defb	'o'
   243                          	defw	__printf_handle_o
   244                          ENDIF
   245                          
   246                          IF CLIB_OPT_PRINTF & $20020
   247                          	defb	'n'
   248                          	defw	__printf_handle_n
   249                          ENDIF
   250                          
   251                          IF CLIB_OPT_PRINTF & $200
   252  00b7  73                	defb	's'
   253  00b8  0000              	defw	__printf_handle_s
   254                          ENDIF
   255                          
   256                          IF CLIB_OPT_PRINTF & $400
   257                          	defb	'c'
   258                          	defw	__printf_handle_c
   259                          ENDIF
   260                          
   261                          IF CLIB_OPT_PRINTF & $4000000
   262                          	defb	'f'
   263                          	defw	__printf_handle_f
   264                          ENDIF
   265                          
   266                          IF CLIB_OPT_PRINTF  & $1000000
   267                          	defb	'e'
   268                          	defw	__printf_handle_e
   269                          ENDIF
   270                          IF CLIB_OPT_PRINTF & $10000000
   271                          	defb	'g'
   272                          	defw	__printf_handle_f
   273                          ENDIF
   274                          IF CLIB_OPT_PRINTF_2
   275                          	defb	'l'
   276                          	defw	__printf_handle_ll
   277                          ENDIF
   278  00ba  00                	defb	0	;end marker
   279                          
   280                          __printf_format_table64:
   281                          
   282                          IF CLIB_OPT_PRINTF_2 & $02
   283                          	defb	'u'
   284                          	defw	__printf_handle_llu
   285                          ENDIF
   286                          
   287                          IF CLIB_OPT_PRINTF_2 & $01
   288                          	defb	'd'
   289                          	defw	__printf_handle_lld
   290                          ENDIF
   291                          
   292                          IF CLIB_OPT_PRINTF_2 & $04
   293                          	defb	'x'
   294                          	defw	__printf_handle_llx
   295                          ENDIF
   296                          
   297                          IF CLIB_OPT_PRINTF_2 & $08
   298                          	defb	'X'
   299                          	defw	__printf_handle_llX
   300                          ENDIF
   301                          IF CLIB_OPT_PRINTF_2  & $10
   302                          	defb	'o'
   303                          	defw	__printf_handle_llo
   304                          ENDIF
   305                          IF CLIB_OPT_PRINTF_2 & $100
   306                          	defb	'B'
   307                          	defw	__printf_handle_llB
   308                          ENDIF
   309  00bb  00                	defb	0	;endmarker
   310                          
   311                          
   312                          
   313                          IF CLIB_OPT_PRINTF & $40000000
   314                          	EXTERN	__printf_get_flags_impl
   315                          	PUBLIC	__printf_get_flags
   316                          	defc	__printf_get_flags = __printf_get_flags_impl
   317                          ELSE
   318                          	EXTERN	__printf_get_flags_noop
   319                          	PUBLIC	__printf_get_flags
   320                          	defc	__printf_get_flags = __printf_get_flags_noop
   321                          ENDIF
   322                          
   323                          ENDIF
   324                          
   325                          
   326                          ;--------
   327                          ; Allow a compile time switch between native output and ANSI terminal
   328                          ;
   329                          ; -pragma-need=ansiterminal
   330                          ;--------
   331                          
   332                          IF NEED_ansiterminal
   333                          	PUBLIC		fputc_cons
   334                          	EXTERN		fputc_cons_ansi
   335                          	EXTERN		puts_cons_ansi
   336                          	defc DEFINED_fputc_cons = 1
   337                          	defc DEFINED_puts_cons = 1
   338                          	defc fputc_cons = fputc_cons_ansi
   339                          
   340                          	; Bridge VT100 to gencon
   341                                  IF DEFINED_CLIB_ANSITERMINAL_BRIDGE & CLIB_ANSITERMINAL_BRIDGE != 0
   342                                      PUBLIC ansi_attr
   343                                      PUBLIC ansi_BEL
   344                                      PUBLIC ansi_cls
   345                                      PUBLIC ansi_CHAR
   346                                      PUBLIC ansi_del_line
   347                                      PUBLIC ansi_SCROLLUP
   348                                      EXTERN __gencon_ansi_attr
   349                                      EXTERN __gencon_ansi_BEL
   350                                      EXTERN __gencon_ansi_cls
   351                                      EXTERN __gencon_ansi_CHAR
   352                                      EXTERN __gencon_ansi_del_line
   353                                      EXTERN __gencon_ansi_SCROLLUP
   354                                      defc ansi_attr = __gencon_ansi_attr
   355                                      defc ansi_BEL = __gencon_ansi_BEL
   356                                      defc ansi_cls = __gencon_ansi_cls
   357                                      defc ansi_CHAR = __gencon_ansi_CHAR
   358                                      defc ansi_del_line = __gencon_ansi_del_line
   359                                      defc ansi_SCROLLUP = __gencon_ansi_SCROLLUP
   360                          
   361                                      ; We're using gencon, don't include an ANSIfont
   362                                      UNDEFINE TAR__no_ansifont
   363                                      defc TAR__no_ansifont = 1
   364                          	    IF !DEFINED_ansicolumns
   365                                          defc ansicolumns = CONSOLE_COLUMNS
   366                                          defc DEFINED_ansicolumns = 1
   367                                      ENDIF
   368                                  ENDIF
   369                          
   370                                 	PUBLIC ansicolumns
   371                          
   372                          	IF !TAR__no_ansifont
   373                                  	PUBLIC ansicharacter_pixelwidth
   374                          		PUBLIC ansifont
   375                                  	PUBLIC ansifont_is_packed
   376                                  ELSE
   377                                          defc DEFINED_ansifont = 1
   378                          	ENDIF
   379                          
   380                          	IF !ansipixels
   381                          		defc ansipixels = 256
   382                          	ENDIF
   383                          
   384                          	IF !DEFINED_ansicolumns
   385                          		 defc ansicolumns = 64
   386                          	ENDIF
   387                          
   388                          	UNDEFINE CONSOLE_COLUMNS
   389                          	defc CONSOLE_COLUMNS = ansicolumns
   390                          
   391                          	IF DEFINED_ansirows
   392                          		UNDEFINE CONSOLE_ROWS
   393                          		defc CONSOLE_ROWS = ansirows
   394                          	ENDIF
   395                          
   396                          
   397                          	IF (ansicolumns = (ansipixels/2))
   398                          	    defc ansicharacter_pixelwidth = 2
   399                                      IF !DEFINED_ansifont
   400                                      	EXTERN ansifont_f4pack
   401                          	    	defc ansifont = ansifont_f4pack
   402                                      	defc ansifont_is_packed = 1
   403                                      ENDIF
   404                          	ENDIF
   405                          	IF (ansicolumns = (ansipixels/3))
   406                          	    defc ansicharacter_pixelwidth = 3
   407                                      IF !DEFINED_ansifont
   408                                          EXTERN ansifont_f4pack
   409                          	        defc ansifont = ansifont_f4pack
   410                                          defc ansifont_is_packed = 1
   411                          	    ENDIF
   412                          	ENDIF
   413                          	IF (ansicolumns = (ansipixels/4))
   414                          	    defc ansicharacter_pixelwidth = 4
   415                                      IF !DEFINED_ansifont
   416                                          EXTERN ansifont_f4pack
   417                          	        defc ansifont = ansifont_f4pack
   418                                          defc ansifont_is_packed = 1
   419                          	    ENDIF
   420                          	ENDIF
   421                          	IF (ansicolumns = (ansipixels/5))
   422                          	    defc ansicharacter_pixelwidth = 5
   423                                      IF !DEFINED_ansifont
   424                                          EXTERN ansifont_f5
   425                          	        defc ansifont = ansifont_f5
   426                                          defc ansifont_is_packed = 0
   427                          	    ENDIF
   428                          	ENDIF
   429                          	IF (ansicolumns = (ansipixels/6))
   430                          	    defc ansicharacter_pixelwidth = 6
   431                                      IF !DEFINED_ansifont
   432                                          EXTERN ansifont_f6
   433                          	        defc ansifont = ansifont_f6
   434                                          defc ansifont_is_packed = 0
   435                          	    ENDIF
   436                          	ENDIF
   437                          	IF (ansicolumns = (ansipixels/7))
   438                          	    defc ansicharacter_pixelwidth = 7
   439                                      IF !DEFINED_ansifont
   440                                          EXTERN ansifont_f8
   441                          	        defc ansifont = ansifont_f8
   442                                          defc ansifont_is_packed = 0
   443                          	    ENDIF
   444                          	ENDIF
   445                          	IF (ansicolumns = (ansipixels/8))
   446                          	    defc ansicharacter_pixelwidth = 8
   447                                      IF !DEFINED_ansifont
   448                                          EXTERN ansifont_f8
   449                          	        defc ansifont = ansifont_f8
   450                                          defc ansifont_is_packed = 0
   451                          	    ENDIF
   452                          	ENDIF
   453                          	IF (ansicolumns = (ansipixels/9))
   454                          	    defc ansicharacter_pixelwidth = 9
   455                                      IF !DEFINED_ansifont
   456                                          EXTERN ansifont_f8
   457                          	        defc ansifont = ansifont_f8
   458                                          defc ansifont_is_packed = 0
   459                          	    ENDIF
   460                          	ENDIF
   461                          
   462                          	IF (ansipixels = 512)
   463                          		IF (ansicolumns = 48)
   464                          			defc ansicharacter_pixelwidth = 9
   465                          			IF !DEFINED_ansifont
   466                          				EXTERN ansifont_f8
   467                          				defc ansifont = ansifont_f8
   468                          				defc ansifont_is_packed = 0
   469                          			ENDIF
   470                          		ENDIF
   471                          		IF (ansicolumns = 80)
   472                          			defc ansicharacter_pixelwidth = 6
   473                          			IF !DEFINED_ansifont
   474                          				EXTERN ansifont_f6
   475                          				defc ansifont = ansifont_f6
   476                          				defc ansifont_is_packed = 0
   477                          			ENDIF
   478                          		ENDIF
   479                          		IF (ansicolumns = 160)
   480                          			defc ansicharacter_pixelwidth = 3
   481                          			IF !DEFINED_ansifont
   482                          				EXTERN ansifont_f4pack
   483                          				defc ansifont = ansifont_f4pack
   484                          				defc ansifont_is_packed = 1
   485                          			ENDIF
   486                          		ENDIF
   487                          	ENDIF
   488                          
   489                          	IF (ansipixels = 256)
   490                          		IF (ansicolumns = 24)
   491                          			defc ansicharacter_pixelwidth = 9
   492                          			IF !DEFINED_ansifont
   493                          				EXTERN ansifont_f8
   494                          				defc ansifont = ansifont_f8
   495                          				defc ansifont_is_packed = 0
   496                          			ENDIF
   497                          		ENDIF
   498                          		IF (ansicolumns = 40)
   499                          			defc ansicharacter_pixelwidth = 6
   500                          			IF !DEFINED_ansifont
   501                          				EXTERN ansifont_f6
   502                          				defc ansifont = ansifont_f6
   503                          				defc ansifont_is_packed = 0
   504                          			ENDIF
   505                          		ENDIF
   506                          		IF (ansicolumns = 80)
   507                          			defc ansicharacter_pixelwidth = 3
   508                          			IF !DEFINED_ansifont
   509                          				EXTERN ansifont_f4pack
   510                          				defc ansifont = ansifont_f4pack
   511                          				defc ansifont_is_packed = 1
   512                          			ENDIF
   513                          		ENDIF
   514                          	ENDIF
   515                          
   516                          ENDIF
   517                          
   518                          ; If it's not been overridden by anybody, lets use the native output
   519                          IF !DEFINED_fputc_cons
   520                          	PUBLIC		fputc_cons
   521                          	defc DEFINED_fputc_cons = 1
   522                                  IF !TAR__fputc_cons_generic
   523                          	     EXTERN	fputc_cons_native
   524                            	     defc fputc_cons = fputc_cons_native
   525                                  ELSE
   526                          	     EXTERN	fputc_cons_generic
   527                            	     defc fputc_cons = fputc_cons_generic
   528                                  ENDIF
   529                          ENDIF
   530                          
   531                          IF DEFINED_fputc_cons
   532                          	PUBLIC		_fputc_cons
   533                          	defc		_fputc_cons = fputc_cons
   534                          
   535                          ENDIF
   536                          
   537                          IF !DEFINED_getk
   538                             IF !DEFINED_fgetc_cons
   539                                IF TAR__fgetc_cons_inkey
   540                                    EXTERN fgetc_cons_inkey
   541                                    EXTERN getk_inkey
   542                                    PUBLIC fgetc_cons
   543                                    PUBLIC _fgetc_cons
   544                                    PUBLIC getk
   545                                    PUBLIC _getk
   546                                    defc fgetc_cons = fgetc_cons_inkey
   547                                    defc _fgetc_cons = fgetc_cons_inkey
   548                                    defc getk = getk_inkey
   549                                    defc _getk = getk_inkey
   550                                ENDIF
   551                             ENDIF
   552                          ENDIF
   553                          
   554                          IF DEFINED_fgetc_cons
   555                            IF !DEFINED__fgetc_cons
   556                                PUBLIC _fgetc_cons
   557                                defc _fgetc_cons = fgetc_cons
   558                            ENDIF
   559                          ENDIF
   560                          
   561                          IF DEFINED_getk
   562                            IF !DEFINED__getk
   563                                PUBLIC _getk
   564                                defc _getk = getk
   565                            ENDIF
   566                          ENDIF
   567                          
   568                          
   569                          ;TODO: These need to go into rules
   570                          IF CONSOLE_COLUMNS
   571                          	PUBLIC CONSOLE_COLUMNS
   572                          ENDIF
   573                          IF CONSOLE_ROWS
   574                          	PUBLIC CONSOLE_ROWS
   575                          ENDIF
   576                          
   577                          IF !CONSOLE_XOFFSET
   578                              defc CONSOLE_XOFFSET = 0
   579                          ENDIF
   580                          PUBLIC CONSOLE_XOFFSET
   581                          IF !CONSOLE_YOFFSET
   582                              defc CONSOLE_YOFFSET = 0
   583                          ENDIF
   584                          PUBLIC CONSOLE_YOFFSET
   585                          
   586                          IF !CLIB_KBHIT_NOSTORE
   587                              defc CLIB_KBHIT_NOSTORE = 0
   588                          ENDIF
   589                          PUBLIC CLIB_KBHIT_NOSTORE
   590                          
   591                          
   592                          
c:/z88dk/\lib\target\micro8085\classic\micro8085_crt0.asm:
   224                                  INCLUDE "crt/classic/crt_section.asm"
c:/z88dk/lib/crt/classic/crt_section.asm:
     1                          ; Memory map and section setup
     2                          ;
     3                          ; Contains the generic variables + features
     4                          
     5                          ;
     6                          ; crt_model = 0    ; everything in RAM
     7                          ; crt_model = 1    ; ROM model, data section copied
     8                          ; crt_model = 2    ; ROM model, data section compressed with zx7
     9                          ; crt_model = 3    ; ROM model, data section compressed with zx0
    10                          
    11                          ; Include the default memory map. You can override this
    12                          
    13                          IF __MMAP == -1
    14                              ; The user has supplied a memory map.
    15                              INCLUDE  "./mmap.inc"
    16                          ELSE
    17                              ; Include the standard memory map
    18                              INCLUDE  "crt/classic/crt_section_standard.asm"
c:/z88dk/lib/crt/classic/crt_section_standard.asm:
     1                          ; Classic Memory map and section setup
     2                          ;
     3                          ; This layout suits all the classic machines. Memory placement is
     4                          ; affected by:
     5                          ;
     6                          ; CRT_MODEL: RAM/ROM configuration
     7                          ; CRT_ORG_CODE: Where code starts executing from
     8                          ; CRT_ORG_BSS:  Where uninitialised global variables are placed
     9                          ; CRT_ORG_GRAPHICS: Where graphics routines + variables are stored (certain ports only)
    10                          
    11                          ;
    12                          ; Contains the generic variables + features
    13                          
    14                          ;
    15                          ; crt_model = 0		; everything in RAM
    16                          ; crt_model = 1		; ROM model, data section copied
    17                          ; crt_model = 2		; ROM model, data section compressed (zx7)
    18                          ; crt_model = 3		; ROM model, data section compressed (zx0)
    19                          
    20                          
    21                          
    22                              INCLUDE "crt/classic/crt_section_code.inc"
c:/z88dk/lib/crt/classic/crt_section_code.inc:
     1                          ; CODE sections defined by the classic library
     2                          
     3                              SECTION CODE
     4                              SECTION code_crt_init
     5                              SECTION code_crt_init_exit
     6                              SECTION code_crt_exit
     7                              SECTION code_crt_exit_exit
     8                              SECTION code_driver
     9                              SECTION code_l		;Keep these in "low" memory
    10                              SECTION code_l_sdcc
    11                              SECTION code_l_sccz80
    12                              SECTION code_l_clang
    13                              SECTION code_z80
    14                              SECTION rodata_driver       ;Keep it in low memoey
    15                              SECTION code_compiler
    16                              SECTION code_clib
    17                              SECTION code_compress_zx7
    18                              SECTION code_compress_zx0
    19                              SECTION code_compress_zx1
    20                              SECTION code_compress_zx2
    21                              SECTION code_compress_aplib
    22                              SECTION code_ctype
    23                              SECTION code_esxdos
    24                              SECTION code_fp
    25                              SECTION code_fp_math48
    26                              SECTION code_fp_math32
    27                              SECTION code_fp_math16
    28                              SECTION code_fp_mbf32
    29                              SECTION code_fp_mbf64
    30                              SECTION code_fp_am9511
    31                              SECTION code_fp_dai32
    32                              SECTION code_math
    33                              SECTION code_error
    34                              SECTION code_stdlib
    35                              SECTION code_string
    36                              SECTION code_adt_b_array
    37                              SECTION code_adt_b_vector
    38                              SECTION code_adt_ba_priority_queue
    39                              SECTION code_adt_ba_stack
    40                              SECTION code_adt_bv_priority_queue
    41                              SECTION code_adt_bv_stack
    42                              SECTION code_adt_p_forward_list
    43                              SECTION code_adt_p_forward_list_alt
    44                              SECTION code_adt_p_list
    45                              SECTION code_adt_p_queue
    46                              SECTION code_adt_p_stack
    47                              SECTION code_adt_w_array
    48                              SECTION code_adt_w_vector
    49                              SECTION code_adt_wa_priority_queue
    50                              SECTION code_adt_wa_stack
    51                              SECTION code_adt_wv_priority_queue
    52                              SECTION code_adt_wv_stack
    53                              SECTION code_alloc_balloc
    54                              SECTION code_alloc_obstack
    55                              SECTION code_arch
    56                              SECTION code_font
    57                              SECTION code_font_fzx
    58                              SECTION code_psg
    59                              SECTION code_sound_ay
    60                              SECTION code_PSGlib
    61                              SECTION code_time
    62                              SECTION code_sprite_sp1
    63                              SECTION code_temp_sp1
    64                              SECTION code_splib2
    65                              SECTION code_sound_bit
    66                          IF !__crt_org_graphics
    67                              SECTION code_graphics
    68                          ENDIF
    69                              SECTION code_video_vdp
    70                              SECTION code_user
    71                              SECTION CODE_END
    72                          
c:/z88dk/lib/crt/classic/crt_section_standard.asm:
    23                              INCLUDE "crt/classic/crt_section_rodata.inc"
c:/z88dk/lib/crt/classic/crt_section_rodata.inc:
     1                          ; RODATA sections defined by the classic library
     2                          
     3                              SECTION RODATA
     4                              SECTION rodata_fp
     5                              SECTION rodata_fp_math48
     6                              SECTION rodata_fp_math32
     7                              SECTION rodata_fp_math16
     8                              SECTION rodata_fp_mbf32
     9                              SECTION rodata_fp_mbf64
    10                              SECTION rodata_fp_am9511
    11                              SECTION rodata_fp_dai32
    12                              SECTION rodata_arch
    13                              SECTION rodata_compiler
    14                              SECTION rodata_clib
    15                              SECTION rodata_psg
    16                              SECTION rodata_sound_ay
    17                          IF !__crt_org_graphics
    18                              SECTION rodata_graphics
    19                          ENDIF
    20                              SECTION rodata_user
    21                              SECTION rodata_font
    22                              SECTION rodata_font_fzx
    23                              SECTION rodata_font_4x8
    24                              SECTION rodata_font_6x8
    25                              SECTION rodata_font_8x8
    26                              SECTION rodata_font_8x10
    27                              SECTION rodata_font_ansi
    28                              SECTION rodata_splib2
    29                              SECTION rodata_sound_bit
    30                              SECTION rodata_video_vdp
    31                              ; Keep the following section last of all
    32                              SECTION rodata_appdor
    33                              SECTION RODATA_END
    34                          
c:/z88dk/lib/crt/classic/crt_section_standard.asm:
    24                              SECTION ROMABLE_END
    25                          IF !__crt_model
    26                              INCLUDE "crt/classic/crt_section_data.inc"
    27                          ENDIF
    28                              INCLUDE "crt/classic/crt_section_bss.inc"
c:/z88dk/lib/crt/classic/crt_section_bss.inc:
     1                              SECTION BSS
     2                          IF __crt_org_bss
     3                              org     __crt_org_bss
     4  0000  00                    defb    0   ; control name of bss binary
     5                          ENDIF
     6                              SECTION bss_fp
     7                              SECTION bss_fp_math32
     8                              SECTION bss_fp_math16
     9                              SECTION bss_fp_mbf32
    10                              SECTION bss_fp_mbf64
    11                              SECTION bss_fp_am9511
    12                              SECTION bss_fp_dai32
    13                              SECTION bss_compress_aplib
    14                              SECTION bss_error
    15                              SECTION bss_crt
    16                              SECTION bss_fardata
    17                          IF __crt_org_bss_fardata_start
    18                              org	__crt_org_bss_fardata_start
    19                          ENDIF
    20                              SECTION bss_compiler
    21                          IF __crt_org_bss_compiler_start
    22                              org	__crt_org_bss_compiler_start
    23                          ENDIF
    24                              SECTION bss_driver
    25                              SECTION bss_arch
    26                              SECTION bss_clib
    27                              SECTION bss_string
    28                              SECTION bss_alloc_balloc
    29                          IF !__crt_org_graphics
    30                              SECTION bss_graphics
    31                          ENDIF
    32                              SECTION bss_psg
    33                              SECTION bss_sound_ay
    34                              SECTION	bss_PSGlib
    35                              SECTION bss_video_vdp
    36                              SECTION bss_splib2
    37                              SECTION bss_user
    38                          
c:/z88dk/lib/crt/classic/crt_section_standard.asm:
    29                          
    30                          IF __crt_model > 0
    31                              SECTION DATA
    32                              org     -1
    33  0000  00                    defb    0		; control name of data binary
    34                              INCLUDE "crt/classic/crt_section_data.inc"
c:/z88dk/lib/crt/classic/crt_section_data.inc:
     1                          
     2                          
     3                              SECTION DATA
     4                            IF !__crt_org_graphics
     5                              SECTION smc_clib
     6                            ENDIF
     7                              SECTION smc_fp
     8                              SECTION smc_sound_ay
     9                              SECTION smc_compress
    10                              SECTION smc_video_vdp
    11                              SECTION smc_user
    12                              SECTION data_driver
    13                              SECTION data_clib
    14                              SECTION data_stdlib
    15                              SECTION data_psg
    16                              SECTION data_sound_ay
    17                              SECTION	data_PSGlib
    18                            IF !__crt_org_graphics
    19                              SECTION data_graphics
    20                            ENDIF
    21                              SECTION data_crt
    22                              SECTION data_fp_mbf32
    23                              SECTION data_arch
    24                              SECTION data_compiler
    25                              SECTION data_splib2
    26                              SECTION data_video_vdp
    27                              SECTION data_user
    28                              SECTION data_alloc_balloc
    29                              SECTION DATA_END
    30                          
c:/z88dk/lib/crt/classic/crt_section_standard.asm:
    35                          ENDIF
    36                              SECTION BSS_END
    37                          
    38                          IF __crt_org_graphics
    39                              SECTION	HIMEM
    40                              org	__crt_org_graphics
    41                              SECTION smc_clib
    42                              SECTION code_graphics
    43                              SECTION code_himem
    44                              SECTION rodata_graphics
    45                              SECTION rodata_himem
    46                              SECTION data_himem
    47                              SECTION data_graphics
    48                              SECTION bss_graphics
    49                              SECTION bss_himem
    50                              SECTION HIMEM_END
    51                          ENDIF
    52                          
c:/z88dk/lib/crt/classic/crt_section.asm:
    19                          ENDIF
    20                          
    21                          
    22                          ; The classic CRTs need some things setup, so do it
    23                          
    24                              SECTION code_crt_init
    25                          crt0_init_bss:
    26                              EXTERN  __BSS_head
    27                              EXTERN  __BSS_END_tail
    28                          IF CRT_INITIALIZE_BSS = 1
    29  0000  af                    xor     a
    30  0001  210000                ld      hl,__BSS_head
    31  0004  010000                ld      bc,__BSS_END_tail - __BSS_head - 1
    32                            IF !__CPU_INTEL__ && !__CPU_GBZ80__
    33                              ld      de,__BSS_head + 1
    34                              ld      (hl),a
    35                              ldir
    36                            ELSE
    37  0007  04                    inc     b
    38  0008  0c                    inc     c
    39                          init_8080:
    40  0009  7723                  ld      (hl+),a
    41  000b  0d                    dec     c
    42  000c  c20000                jr      NZ,init_8080
    43  000f  05                    dec     b
    44  0010  c20000                jr      NZ,init_8080
    45                            ENDIF
    46                          ELSE
    47                              xor     a
    48                          ENDIF
    49                          
    50                              ; a = 0 - reset exitcount
    51  0013  320000                ld      (exitcount),a
    52                          IF CRT_ENABLE_STDIO = 1 && CLIB_FOPEN_MAX > 0
    53                              ; Setup std* streams
    54  0016  210000                ld      hl,__sgoioblk+2
    55  0019  3600                  ld      (hl),19 ;stdin
    56  001b  210000                ld      hl,__sgoioblk+12
    57  001e  3600                  ld      (hl),21 ;stdout
    58  0020  210000                ld      hl,__sgoioblk+22
    59  0023  3615                  ld      (hl),21 ;stderr
    60                          ENDIF
    61                          IF DEFINED_USING_amalloc
    62                            IF __CPU_GBZ80__
    63                              ld      hl,__BSS_END_tail
    64                              ld      a,l
    65                              ld      (_heap),a
    66                              ld      a,h
    67                              ld      (_heap+1),a
    68                            ELSE
    69                              ld      hl,__BSS_END_tail
    70                              ld      (_heap),hl
    71                            ENDIF
    72                          ENDIF
    73                          IF ( __crt_model = 1 )
    74                              ; Just copy the DATA section
    75                              EXTERN  __ROMABLE_END_tail
    76                              EXTERN  __DATA_head
    77                              EXTERN  __DATA_END_tail
    78  0025  210000                ld      hl,__ROMABLE_END_tail
    79  0028  110000                ld      de,__DATA_head
    80  002b  010000                ld      bc,__DATA_END_tail - __DATA_head
    81                              EXTERN  asm_memcpy
    82  002e  cd0000                call    asm_memcpy
    83                          ELIF ( __crt_model >= 2 )
    84                              EXTERN  __ROMABLE_END_tail
    85                              EXTERN  __DATA_head
    86                              ld      hl,__ROMABLE_END_tail
    87                              ld      de,__DATA_head
    88                            IF ( __crt_model = 2)
    89                              EXTERN  asm_dzx7_standard
    90                              call    asm_dzx7_standard
    91                            ELIF ( __crt_model = 3)
    92                              EXTERN  asm_dzx0_standard
    93                              call    asm_dzx0_standard
    94                            ENDIF
    95                          ENDIF
    96                          
    97                              SECTION code_crt_init_exit
    98  0000  c9                    ret
    99                              SECTION code_crt_exit
   100                          crt0_exit:
   101                              ; Teardown code can go here
   102                              SECTION code_crt_exit_exit
   103  0000  c9                    ret
   104                          
   105                          
   106                              SECTION bss_crt
   107                          IF CRT_ENABLE_STDIO = 1 && CLIB_FOPEN_MAX > 0
   108                              PUBLIC  __sgoioblk
   109                              PUBLIC  __sgoioblk_end
   110                          __sgoioblk:                     ;stdio control block
   111  0000  00f000006effff00      defs    CLIB_FOPEN_MAX * 10
              0000000000090000  
              0009000022000002  
              000013000c00      
   112                          __sgoioblk_end:                 ;end of stdio control block
   113                          ENDIF
   114                          
   115                          IF !DEFINED_basegraphics
   116                              PUBLIC  base_graphics
   117                          base_graphics:
   118  001e  0000                  defw    0                   ;Address of graphics map
   119                          ENDIF
   120                              PUBLIC  exitsp
   121                              PUBLIC  exitcount
   122                          exitsp:
   123  0020  0000                  defw    0                   ;atexit() stack
   124                          exitcount:
   125  0022  00                    defb    0                   ;Number of atexit() routines
   126                          IF DEFINED_USING_amalloc
   127                              PUBLIC  _heap
   128                              ; The heap pointer will be wiped at bss initialisation.
   129                              ; Its value (based on __tail) will be set later if set
   130                              ; by sbrk() during AMALLOC initialisation.
   131                          _heap:
   132                              defw __BSS_END_tail         ; Initialised by code_crt_init - location of the last program byte
   133                              defw 0
   134                          ENDIF
   135                          
   136                          IF CLIB_BALLOC_TABLE_SIZE > 0
   137                          
   138                              ; create balloc table
   139                              SECTION data_alloc_balloc
   140                              PUBLIC  __balloc_array
   141                          __balloc_array:
   142                              defw __balloc_table
   143                          
   144                              SECTION bss_alloc_balloc
   145                              PUBLIC  __balloc_table
   146                          __balloc_table:
   147                              defs CLIB_BALLOC_TABLE_SIZE * 2
   148                          
   149                          ENDIF
   150                          
c:/z88dk/\lib\target\micro8085\classic\micro8085_crt0.asm:
   225                          
   226                          ;-------------------------------------------------------------------------
   227                          
